m=natural_regression(Duncan[2:3],Duncan[4])
m=natural_regression(Duncan[2:3],Duncan[4])
x
y
class(x)
library(DensityEstimation)
library(DensityEstimation)
m=natural_regression(Duncan[2:3],Duncan[4])
library(DensityEstimation)
m=natural_regression(Duncan[2:3],Duncan[4])
m
m$simplex_models
class(1:4)
m=natural_regression(Duncan[2:3],Duncan[4])
library(DensityEstimation)
m=natural_regression(Duncan[2:3],Duncan[4])
predict(m,c(40,40))
predict.natural_regression(m,c(40,40))
library(DensityEstimation)
m=natural_regression(Duncan[2:3],Duncan[4])
predict(m,c(40,40))
library(DensityEstimation)
m=natural_regression(Duncan[2:3],Duncan[4])
predict(m,c(40,40))
library(DensityEstimation)
m=natural_regression(Duncan[2:3],Duncan[4])
predict(m,c(40,40))
predict(m,c(40,40))
model$numerics
predict(m,c(40,40))
predict(m,c(40,40))
predict(m,c(40,40))
library(DensityEstimation)
m=natural_regression(Duncan[2:3],Duncan[4])
predict(m,c(40,40))
model$numerics
X[model$numerics]
geometry::tsearchn(model$class_x[[index]],model$tes[[index]]$tri,X[model$numerics])$idx
geometry::tsearchn(model$class_x[[index]],model$tes[[index]]$tri,matrix(X[model$numerics],nrow=1))$idx
library(DensityEstimation)
m=natural_regression(Duncan[2:3],Duncan[4])
predict(m,c(40,40))
m=natural_regression(Duncan[1:3],Duncan[4])
m=natural_regression(Duncan[1:3],Duncan[4])
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
m=natural_regression(Duncan[2:3],Duncan[4])
Q
library(DensityEstimation)
m=natural_regression(Duncan[2:3],Duncan[4])
library(DensityEstimation)
m=natural_regression(Duncan[2:3],Duncan[4])
predict(m,c(40,40))
m=natural_regression(Duncan[1:3],Duncan[4])
m=natural_regression(Duncan[1:3],Duncan[4])
geometry::delaunayn(class_x[[1]],full=T)
m=natural_regression(Duncan[1:3],Duncan[4])
class_x[[1]]
m=natural_regression(Duncan[1:3],Duncan[4])
x
x[matches[[1]],]
matches[[1]]
matches
m=natural_regression(Duncan[1:3],Duncan[4])
levels
x[factors]
levels
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
get_factor_manager(Duncan[1],1)
DensityEstimation:::get_factor_manager(Duncan[1],1)
library(DensityEstimation)
DensityEstimation:::get_factor_manager(Duncan[1],1)
temp=DensityEstimation:::get_factor_manager(Duncan[1],1)
length(temp$levels)
temp$get_levels(1)
library(DensityEstimation)
temp=DensityEstimation:::get_factor_manager(Duncan[1],1)
temp$levels[[1]][1/temp$reps[1]]
temp$levels[1][1/temp$reps[1]]
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
m=natural_regression(Duncan[1:3],Duncan[4])
m=natural_regression(Duncan[1:3],Duncan[4])
class_y
i
class_y[[i]]
class_y[[i]][pnts]
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
class_y[[1]]
y=Duncan[4]
y[1:4,]
y[1:4,,drop=F]
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
predict(m,c("bc",50,50))
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
predict(m,c("bc",50,50))
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
predict(m,c("bc",50,50))
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
predict(m,c("bc",50,50))
predict(m,c("bc",30,30))
predict(m,c("bc",30,30))
predict(m,c("bc",30,30))
simplex
model$simplex_models[[index]]
model$simplex_models[[index]][,simplex]
c(1,X[model$numerics])
predict(m,data.frame(prof="bc",income=30,eduction=30))
x
p=data.frame(prof="bc",income=30,eduction=30)
p
head(Duncan[1:3])
predict(m,data.frame(prof="bc",income=30,eduction=30))
predict(m,data.frame(prof="bc",income=30,eduction=30))
predict(m,data.frame(prof="bc",income=30,eduction=30))
index=m$factor_manager$get_row(p[1,])
index
geometry::tsearchn(m$class_x[[index]],m$tes[[index]]$tri,matrix(x[,model$numerics],nrow=1))$idx
geometry::tsearchn(m$class_x[[index]],m$tes[[index]]$tri,matrix(x[,m$numerics],nrow=1))$idx
m$numerics
p
geometry::tsearchn(m$class_x[[index]],m$tes[[index]]$tri,matrix(p[,m$numerics],nrow=1))$idx
apply(p,1,function(x)geometry::tsearchn(m$class_x[[index]],m$tes[[index]]$tri,matrix(x[,m$numerics],nrow=1))$idx)
apply(p,1,function(x)print(x))
apply(p,1,function(x)print(paste("Hi",x)))
apply(Duncan[1:2,],1,function(x)print(paste(x)))
apply(Duncan[1:2,],1,function(x)print(x))
apply(as.matrix(Duncan[1:2,]),1,function(x)print(x))
geometry::tsearchn(m$class_x[[1]],m$tes[[1]]$tri,p[,m$numerics])$idx
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
predict(m,data.frame(prof="bc",income=30,eduction=30))
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
predict(m,data.frame(prof="bc",income=30,eduction=30))
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
predict(m,data.frame(prof="bc",income=30,eduction=30))
model
Q
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
predict(m,data.frame(prof="bc",income=30,eduction=30))
predict(m,data.frame(prof="bc",income=30,eduction=30))
feature_vector[,model$numerics]
library(DensityEstimation)
predict(m,data.frame(prof="bc",income=30,eduction=30))
model$simplex_models[[index]][,simplex]%*%c(1,feature_vector[model$numerics])
}
predict(m,data.frame(prof="bc",income=30,eduction=30))
library(DensityEstimation)
predict(m,data.frame(prof="bc",income=30,eduction=40))
predict(m,data.frame(prof="bc",income=30,eduction=20))
predict(m,data.frame(prof="bc",income=40,eduction=50))
predict(m,data.frame(prof="bc",income=40,eduction=40))
m=natural_regression(Duncan[1:2],Duncan[3:4])
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
library(DensityEstimation)
m=natural_regression(Duncan[1:3],Duncan[4])
predict(m,data.frame(prof="bc",income=40,eduction=40))
?kknn
??knn
order(c(1,2,1.3))
?lm
df=data.frame(Duncan[c(1,3,5,7,9),2:3],y=Duncan[4])
df=data.frame(Duncan[c(1,3,5,7,9),2:3],y=Duncan[c(1,3,5,7,9),4])
lm(y~.,df)
m=lm(y~.,df)
predict(m,c(40,40))
m
predict(m,data.frame(income=40,education=40))
library(DensityEstimation)
test_suite()
library(DensityEstimation)
test_suite()
library(DensityEstimation)
test_suite()
test_suite()
test_suite()
library(DensityEstimation)
library(DensityEstimation)
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
apply(Duncan[,1],1,function(row)all(row=="wc"))
apply(Duncan[,1,drop=F],1,function(row)all(row=="wc"))
df=cbind(Duncan[1],Duncan[sample(nrow(Duncan)),1])
apply(df[,1:2,drop=F],1,function(row)all(row==c("wc","wc")))
apply(df[,1:2,drop=F],1,function(row)all(row==c("wc","prof")))
df
apply(df[,1:2,drop=F],1,function(row)all(row==c("bc","bc")))
apply(df[,1:2,drop=F],1,function(row)all(row==c("wc","prof")))
apply(df[,1:2,drop=F],1,function(row)all(row==c("bc","bc")))
apply(df[,1:2,drop=F],1,function(row)all(row==c("bc","wc")))
df[df[,1]=="bc",]
df[df[,1]=="wc",]
apply(df[,1:2,drop=F],1,function(row)all(row==c("wc","bc")))
test_suite()
test_suite()
test_suite()
sub_x
test_suite()
test_suite()
test_suite()
test_suite()
m
x
predict(m,x)
predict(m,data.frame(income=x[1],education=x[2]))
df=cbind(df,x)
df=cbind(df,c(x,NA))
predict(m,df[nrow(df),])
df
x
test_suite()
df=rbind(df,c(x,NA))
predict(m,df[nrow(df),])
df
x
test_suite()
test_suite()
predict(m,data.frame(income=x[1],education=x[2]))
predict(m,df[nrow(df),])
test_suite()
test_suite()
test_suite()
test_suite()
x
Duncan[1,]
class(Duncan[1,])
test_suite()
test_suite()
df
x
test_suite()
test_suite()
x
y
test_suite()
test_suite()
model$x_factor
model$x_factor
test_suite()
test_suite()
apply(model$x_factor,1,function(row)all(row==x[model$factor_indices]))
model$x_factor
test_suite()
test_suite()
df
neighbors
subset_x
x[model$factor_indices]
test_suite()
test_suite()
matches
matches[[i]]
test_suite()
test_suite()
y[matches[[i]],,drop=FALSE]
class(y)
class(Duncan[,4])
temp=as.numeric(Duncan[,4])
temp
class(temp)
if (class(Duncan[,4])=="numeric") print("OK")
test_suite()
test_suite()
source('~/Old Documents/Documents_Old/DensityEstimation/R/nat_neigh_regression.R', echo=TRUE)
test_suite()
test_suite()
mse_knn
p_knn
p_knn[predicted]-y[test_indices][predicted]
p_knn[predicted]
y[test_indices][predicted]
y[test_indices]
p_nn
cbind(x[test_indices,],y[test_indices])
x
test_suite()
warnings
warnings()
cars
head(cars)
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
x
nrow(x)
test_suite()
test_suite()
x
nrow(x)
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
lm(y~x,data.frame(x=c(0,4),y=c(1,3.4)))
test_suite()
test_suite()
class_x[,1]
class_x
n
test_suite()
test_suite()
x_ordered
test_suite()
test_suite()
X
Y
crossprod(X,Y)
class(Y)
class(X)
test_suite()
test_suite()
warnings()
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
test_suite()
res=test_suite()
res
res[[1]]
plot(res[[1]])
boxplot(res[[1]])
boxplot(t(res[[1]]))
boxplot(res[[1]][1,]-res[[1]][2,])
boxplot(res[[1]][2,]-res[[1]][1,])
boxplot(res[[1]][1,]-res[[1]][2,])
abline(h=0,col="red")
boxplot(res[[2]][1,]-res[[2]][2,])
abline(h=0,col="red")
boxplot(res[[1]][1,]-res[[1]][2,],res[[2]][1,]-res[[2]][2,])
abline(h=0,col="red")
airquality
head(airquality)
?datasets
library(help="datasets")
ChickWeight
head(ChickWeight)
head(C02)
head(C02)
head(C02)
CO2
head(CO2)
res=test_suite()
warnings()
res=test_suite()
res=test_suite(skip=1:2)
res=test_suite(skip=1:2)
res=test_suite(skip=1:2)
tr_x
class(x)
CO2
sapply(CO2,class)
head(Nile)
head(UKDriverDeaths)
head(USPersonalExpenditure)
head(iris)
res=test_suite(skip=1:2)
boxplot(res[[1]][1,]-res[[1]][2,])
res
boxplot(res[[3]][1,]-res[[3]][2,])
abline(h=0,col="red")
r3=res[[3]]
r3=res[[3]][1,]-res[[3]][2,]
r3=r3/sd(r3)
boxplot(r3)
res=test_suite()
plot_test_results(res)
r3=res[[3]][1,]-res[[3]][2,]
boxplot(r3)
plot_test_results(res)
morley
head(morley)
head(occupationalStatus)
head(quakes)
?quakes
res=test_suite(skip=1:3)
res=test_suite(skip=1:3,verbose=10)
r4=res[[4]][1,]-res[[4]][2,]
boxplot(r4)
boxplot(r3)
res=test_suite(skip=1:3)
res=test_suite(skip=1:2)
ps
length(valid_indices)
ks
res=test_suite()
res=test_suite()
res=test_suite(skip=1:3)
res=test_suite(skip=1:3)
X
Y
X%*%Y
class(X)
X=cbind(rep(1,length(neighbors)),as.matrix(model$x_numeric[neighbors,,drop=FALSE]))
class(X)
X%*%Y
X
crossprod(X,Y)
Y
res=test_suite(skip=1:3)
res=test_suite(skip=1:3)
res=test_suite(skip=1:3)
c(1,x[model$numeric_indices]
)
c(1,x[1,model$numeric_indices])
c(1,as.matrix(x[model$numeric_indices]))
res=test_suite(skip=1:3)
res=test_suite(skip=1:3)
res=test_suite(skip=1:3)
nrow(x)
res=test_suite(skip=1:3)
res=test_suite(skip=1:3,verbose=10)
res=test_suite(skip=1:3,verbose=10)
k
dist_order
head(quakes)
res=test_suite(skip=1:3,verbose=10)
res=test_suite(skip=1:3,verbose=10)
best
mses
ks
ps
dim(p)
dim(ps)
ks
length(valid_indices)
View(df)
res=test_suite(skip=1:3,verbose=10)
out
out=predict_one.knn(x[i,,drop=FALSE],model,ks)
out
ks
dim(out)
dim(x)
res=test_suite(skip=1:3,verbose=10)
out
B
c(1,as.matrix(x[model$numeric_indices]))
B%*%c(1,as.matrix(x[model$numeric_indices]))
B[,1]%*%c(1,as.matrix(x[model$numeric_indices]))
res=test_suite(skip=1:3,verbose=10)
dim(ps)
ks
res=test_suite(skip=1:3,verbose=10)
res=test_suite(skip=1:3,verbose=10)
p=predict_one.knn(x[i,,drop=FALSE],model,ks)
dim(p)
p
nrow(x)
res=test_suite(skip=1:3,verbose=10)
dim(ps)
ps
nrow(ps)
k
best
res=test_suite()
warnings()
sapply(quakes,class)
res=test_suite()
greatest_less_than_index
numerics
model$class_x[[index]][model$tes[[index]],1]
nrow(quakes)
nrow(Duncan)
res=test_suite(order=0)
res=test_suite(order=0)
greatest_less_than_index
model$class_x[[index]][model$tes[[index]],1]
length(model$class_x[[index]][model$tes[[index]],1])
model$simplex_models[[index]]
numerics
res=test_suite(order=0)
temp=quakes[1:100,]
temp2=quakes[101:1000,]
temp2-temp[1,]
apply(temp2,1,function(row) row-temp[1,])
res=test_suite(order=0,skip=1:3)
res=test_suite(order=0,skip=1:4)
any(is.na(swiss))
any(is.na(stackloss))
any(is.na(ToothGrowth))
stackloss
40*1200
200000/60
(200000/60)/24
365/((200000/60)/24)
2.628*10000
